## the older thread package is 5005threads, from Perl 5.005, some things 
## are not compatible anymore in the more recent Perl 5.6 threading model

## package - use the "Thread" package, by default "async" - also possible as async BLOCK
use Thread qw(:DEFAULT async yield);

## new - start new thread with function "start_sub"
my $t = Thread->new(\&start_sub, @start_args);


## join - wait for another thread
## detach - thread is never going to be joined
$result = $t->join;
$t->detach;

## done - check if a thread already has finished
if($t->done){
    $t->join;
}

## equal - compares if two threads are equal
if($t->equal($another_thread)){
    #...
}

## yield - allows another thread to take control of the CPU, implementation dependent!
yield();

## self - returns the thread ID of "self"
my $tid = Thread->self->tid;


## lock - only in "5005Threads", also declare as :locked
lock($scalar);
lock(@array);
lock(%hash);

## list - returns a list of all non-joined, non-detached thread objects
my @list = Thread->list;


## thread basic - sub and create joined
sub start_thread
{
    my @args = @_;
    print('Thread started: ', join(' ', @args), "\n");
}
my $thr = threads->create('start_thread', 'argument');
$thr->join();




## create another thread (joined), short writing
threads->create( sub{ print "I am a thread\n"; } )->join();




## create an async thread 
my $thr2 = async { foreach (@files) {...} };
$thr2->join();
if(my $err = $thr2->error()){
    warn("thread error: $err\n");
}




## invoke thread in list context (implicit) so it can return a list
my ($thr) = threads->create( sub{ return qw/a b c/; });
## or specify list context explicitly
my $thr = threads->create({ 'context' => 'list'}
                          , sub{ return qw/a b c/; }); 
my @results = $thr->join();
$thr->detach();



## get a thread's object
$thr = threads->self();
$thr = threads->object($tid);

## get a thread's ID
$tid = threads->tid();
$tid = $thr->tid();
$tid = "$thr";

## give other threads a chance to run
threads->yield();
yield();



## lists of non-detached threads
my @threads = threads->list();
my $thread_count = threads->list();

my @running = threads->list(threads::running);
my @joinable = threads->list(threads::joinable);


## test thread objects
if($thr1 == $thr2){
    ...
}



## manage thread stack size
$stack_size = threads->get_stack_size();
$old_size = threads->set_stack_size(32*4096);

## create a thread with a specific context and stack size
my $thr = threads->create({ 'context' => 'list'
                                , 'stack_size' => 32*4096
                                , 'exit' => 'thread_only' }
                          , \&foo);


## get threads context
my $wantarray = $thr->wantarray();


## check thread's state
if($thr->is_running()){
    sleep(1);
}
if($thr->is_joinable()){
    $thr->join();
}


## send a signal to a thread
$thr->kill('SIGUSR1');


## exit
$threads->exit();
